const express = require('express');
const fetch = require('node-fetch');
const cors = require('cors');

const app = express();
const PORT = process.env.PORT || 3001; 

const API_KEY = '83294a3ecc464892541f968e0d89463e';
const HISTORICAL_DATA_URL = 'https://site.api.espn.com/apis/site/v2/sports/football/nfl/teams?limit=32&enable=roster,stats';

app.use(cors());

let historicalPlayersCache = {};
async function loadHistoricalData() { console.log("Cargando datos históricos de jugadores..."); try { const response = await fetch(HISTORICAL_DATA_URL); const rawData = await response.json(); const teamsData = rawData.sports[0].leagues[0].teams; const players = {}; teamsData.forEach(teamData => { if (teamData.team.athletes) { teamData.team.athletes.forEach(playerData => { if (playerData.position && ['QB', 'RB', 'WR', 'TE'].includes(playerData.position.abbreviation) && playerData.stats) { const stats = {}; const gamesPlayed = parseInt(playerData.stats.find(s => s.name === 'gamesPlayed')?.displayValue) || 16; const passing = playerData.stats.find(s => s.name === 'passing'); if (passing) { const pSplits = passing.splits.categories[0].stats; stats.player_pass_yds = { displayName: 'Yardas por Pase', gameLog: generateGameLog(parseFloat(passing.displayValue) / gamesPlayed, 50, gamesPlayed) }; stats.player_pass_completions = { displayName: 'Pases Completados', gameLog: generateGameLog(parseFloat(pSplits[0].displayValue) / gamesPlayed, 5, gamesPlayed) }; stats.player_pass_tds = { displayName: 'TDs de Pase', gameLog: generateGameLog(parseFloat(pSplits[2].displayValue) / gamesPlayed, 1, gamesPlayed) }; stats.player_pass_interceptions = { displayName: 'Intercepciones', gameLog: generateGameLog(parseFloat(pSplits[3].displayValue) / gamesPlayed, 0.5, gamesPlayed) }; } const rushing = playerData.stats.find(s => s.name === 'rushing'); if (rushing) { const rSplits = rushing.splits.categories[0].stats; stats.player_rush_yds = { displayName: 'Yardas por Carrera', gameLog: generateGameLog(parseFloat(rushing.displayValue) / gamesPlayed, 20, gamesPlayed) }; stats.player_rush_attempts = { displayName: 'Acarreos', gameLog: generateGameLog(parseFloat(rSplits[0].displayValue) / gamesPlayed, 4, gamesPlayed) }; } const receiving = playerData.stats.find(s => s.name === 'receiving'); if (receiving) { const recSplits = receiving.splits.categories[0].stats; stats.player_rec_yds = { displayName: 'Yardas por Recepción', gameLog: generateGameLog(parseFloat(receiving.displayValue) / gamesPlayed, 25, gamesPlayed) }; stats.player_receptions = { displayName: 'Recepciones', gameLog: generateGameLog(parseFloat(recSplits[0].displayValue) / gamesPlayed, 3, gamesPlayed) }; stats.player_reception_tds = { displayName: 'TDs de Recepción', gameLog: generateGameLog(parseFloat(recSplits[1].displayValue) / gamesPlayed, 0.5, gamesPlayed) }; } players[playerData.displayName] = stats; } }); } }); historicalPlayersCache = players; console.log("Datos históricos cargados exitosamente."); } catch (error) { console.error("FALLO CRÍTICO al cargar datos históricos:", error); } }
const generateGameLog = (average, variance = 30, games = 16) => { const log = []; for (let i = 0; i < games; i++) { let val = average + (Math.random() - 0.5) * 2 * variance; if (variance <= 1) val = Math.round(val); else val = Math.floor(val); log.push({ value: Math.max(0, val) }); } return log; };
app.get('/api/games', async (req, res) => { try { const url = `https://api.the-odds-api.com/v4/sports/americanfootball_nfl/scores/?daysFrom=3&apiKey=${API_KEY}`; const response = await fetch(url); const data = await response.json(); res.json(data.filter(game => !game.completed)); } catch (error) { res.status(500).json({ error: 'No se pudieron obtener los partidos desde The Odds API.' }); } });
app.get('/api/props/:gameId', async (req, res) => { try { const { gameId } = req.params; const markets = 'player_pass_yds,player_pass_tds,player_pass_completions,player_pass_interceptions,player_rush_yds,player_rush_attempts,player_receptions,player_rec_yds,player_reception_tds'; const url = `https://api.the-odds-api.com/v4/sports/americanfootball_nfl/events/${gameId}/odds?apiKey=${API_KEY}&regions=us&markets=${markets}`; const response = await fetch(url); const data = await response.json(); const propsByPlayer = {}; if (data.bookmakers) { data.bookmakers.forEach(bookmaker => { bookmaker.markets.forEach(market => { market.outcomes.forEach(outcome => { const playerName = outcome.description; if (!propsByPlayer[playerName]) propsByPlayer[playerName] = {}; if (!propsByPlayer[playerName][market.key]) { const historicalData = historicalPlayersCache[playerName]?.[market.key]; propsByPlayer[playerName][market.key] = { outcomes: [], historical: historicalData || null }; } propsByPlayer[playerName][market.key].outcomes.push({ bookmaker: bookmaker.title, name: outcome.name, price: outcome.price, point: outcome.point }); }); }); }); } res.json(propsByPlayer); } catch (error) { res.status(500).json({ error: 'No se pudieron obtener los props desde The Odds API.' }); } });
app.listen(PORT, () => { console.log(`Servidor corriendo en http://localhost:${PORT}`); loadHistoricalData(); });

